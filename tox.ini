;Environment, package and testing specifications for tox.

;Run this using 'tox -r --develop -c tox.ini' from a non-conda environment that has tox, but not tox-conda, installed.
;See below for more details

;Note that there is a well known bug that tox doesn't realize if the requirements.txt file has changed between runs. 
;See e.g. here https://tox.wiki/en/latest/example/general.html or here https://github.com/tox-dev/tox/issues/149
;To avoid any resulting bugs, always start tox using the '-r' flag, to force a rebuild of the virtual envs everytime.
;The '--develop' option is used so that tox doesn't try to install the package using pypi, which can't work as rescomp
;isn't on there yet, and instead runs 'pip install -e .' behind the scenes.

;tox-conda and python interpreter notes:
;To be able to test both a normal pip installation, as well as one using conda environments, we use tox-conda to allow
;conda_deps and conda-spec to specify the packages that should be installed using conda, instead of pip. in the c-*
;environments, while we use the normal pip and virtual envs in the pe-* environments
;Using that plugin changes the way that python versions are found by tox in a way that I frankly don't quite
;understand. Additionally you can't turn tox-conda on/off on and environment basis, only globally for the whole tox
;project (see https://github.com/tox-dev/tox-conda/issues/36). Annoyingly, just manually specifying the the pip
;and conda python interpreters we want to use is not enough to make the tox-conda plugin work correctly, as the creation
;of the environments themselves must be done with conda.
;As such, the seemingly only way to use conda and pip for the same project is to specify two .ini files, one for pip,
;one for conda..

;To run this tox.ini with the correct setup, install pyenv and create 4 virtual environments with python-versions 3.6 to
;3.9 and tox installed. Then, set these pyenv versions as local versions for this repository. e.g.:
;pyenv local pe_tox_py36 pe_tox_py37 pe_tox_py38 pe_tox_py39
;Then you can run the tests specified in this ini by using:
;tox -r --develop -c tox.ini

;To run the tox-conda.ini file with the correct setup, you just need to have conda installed on your system. Then use:
;tox -r --develop -c tox-conda.ini
;Surprisingly(?), the pyenv setup from above does not interfere with the conda setup at all, as each python version is
;installed fresh from the conda servers if tox-conda is used.

;Also note that, if you want to change the python version an evironment, you have to delete the .tox folder containing
;the already built environments. Otherwise it will just use whatever is in there, even if you tell tox not to.
;Similarly, if you change the setup.py, you should always delete rescomp.egg-info, as otherwise outdated info might be
;used to try installing the package. To be save, just use:
;rm -rf .tox && rm -rf rescomp.egg-info && tox -r --develop -c tox.ini
;or
;rm -rf .tox && rm -rf rescomp.egg-info && tox -r --develop -c tox-conda.ini
;respectively

;VERY IMPORTANT: Do not have underscores in any of the environment names, for some reason tox can't deal with them!
;Also note that these names are not just names, but there is quite a bit of substitution and pattern matching going on.
;See the tox docs for more details.
[tox]
envlist =
;    pe-py36-current
;    pe-py{37,38}-current
;    pe-py{36}-oldest-supported
;    pe-py{37}-oldest-supported
;    pe-py{38}-oldest-supported
;    pe-py{39}-oldest-supported
    pe-py{36,37,38,39}-current
    pe-py{36,37,38,39}-oldest-supported
    pe-py{36,37,38,39}-newest-supported
    pe-py{36,37,38,39}-cutting_edge

[pe-common-deps]
deps =
    tox
    pytest

[pe-requirements-current]
deps =
    -Ur{toxinidir}{/}requirements.txt

[pe-requirements-oldest-supported]
deps =
    py36: -Ur{toxinidir}{/}env_specs{/}requirements_oldest_supported_py36.txt
    py37: -Ur{toxinidir}{/}env_specs{/}requirements_oldest_supported_py37.txt
    py38: -Ur{toxinidir}{/}env_specs{/}requirements_oldest_supported_py38.txt
    py39: -Ur{toxinidir}{/}env_specs{/}requirements_oldest_supported_py39.txt

[pe-requirements-newest-supported]
deps =
    -Ur{toxinidir}{/}env_specs{/}requirements_newest_supported.txt

[pe-requirements-cutting-edge]
deps =
    -Ur{toxinidir}{/}env_specs{/}requirements_cutting_edge.txt

[testenv:pe-py{36,37,38,39}-{current,oldest-supported,newest-supported,cutting-edge}]
;basepython =
;    py36: {homedir}{/}.pyenv{/}versions{/}pe_tox_py36{/}bin{/}python
;    py37: {homedir}{/}.pyenv{/}versions{/}pe_tox_py37{/}bin{/}python
;    py38: {homedir}{/}.pyenv{/}versions{/}pe_tox_py38{/}bin{/}python
;    py39: {homedir}{/}.pyenv{/}versions{/}pe_tox_py39{/}bin{/}python
deps =
    {[pe-common-deps]deps}
    current: {[pe-requirements-current]deps}
    oldest-supported: {[pe-requirements-oldest-supported]deps}
    newest-supported: {[pe-requirements-newest-supported]deps}
    cutting-edge: {[pe-requirements-cutting-edge]deps}

[testenv]
allowlist_externals =
    which
    type
    conda
    echo
commands =
;    echo "--------------------------------------------------------------------------------"
;    which python
;    python -V
;    echo "--------------------------------------------------------------------------------"
;    which pip
;    pip -V
;    python -m pip -V
;    which tox
;    tox --version
;    which conda
;    conda -V
    pip list
;    conda list
;    which pytest
;    python -m pytest -v --tb=no
    pytest -v --tb=no
